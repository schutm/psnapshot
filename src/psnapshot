#!/bin/sh

set -o nounset
set -f

PSNAPSHOT_VERSION=0.9.2

PSNAPSHOT_FALSE=1
PSNAPSHOT_TRUE=0

PSNAPSHOT_BAIL=1
PSNAPSHOT_SUCCESS=0

# Echos a message if the passed level is lower than the log level.
#
# Args:
#   level: integer: Log level to log the message with.
#   message: string: The message to log.
log() {
    if [ $1 -le $_loglevel ]; then
        printf "%s\n" "$2"
    fi
}

# Convenience functions to log a message with a certain level.
#
# Args:
#   message: string: The message to log.
error()   { log 0 "$*" >&2;   }
info()    { log 1 "$*";	      }
message() { log 2 "  $*";     }
verbose() { log 3 "    $*";   }
debug()   { log 4 "      $*"; }

# Bails out after printing an error message.
#
# Args:
#   message: string: Message to print before bailing out. [optional]
#   any additional arguments are ignored. There is no logic in bailing
#   if the invocation of bail() is incorrect.
# Returns:
#   Never returns.
bail() {
    [ -n "${1:-}" ] && error "$1"
    exit $PSNAPSHOT_BAIL
}

# Quits the script with a success code.
#
# Args:
#   None.
# Returns:
#   Never returns.
quit() {
    exit $PSNAPSHOT_SUCCESS
}

# Checks if a value exsists in a list.
#
# Args:
#   needle: string/integer: The searched value.
#   haystack: string/integer: The list to search in. [optional]
# Returns:
#   integer: success (TRUE/FALSE constant).
# Bails:
#   Unexpected number of arguments.
in_list() {
    [ $# -ge 1 ] || \
        bail "in_list expects at least 1 arguments; $# given"

    needle=$1
    shift

    for x in $@; do
        if [ $needle -eq $x ]; then
            unset x needle
            return $PSNAPSHOT_TRUE
        fi
    done

    unset x needle
    return $PSNAPSHOT_FALSE
}

# Add values to a list.
#
# Args:
#   list: string: The variable to add the value to.
#   value: array of strings: The values to add to the list.
# Returns:
#   integer: success (TRUE/FALSE constant).
# Bails:
#   Unexpected number of arguments.
add_to_list() {
    [ $# -ge 1 ] || \
        bail "add_to_list expects at least 1 argument; $# given"

    eval list=\${${1:-}:-}
    var=$1
    shift;
    for item; do
        [ -z "${list:-}" ] || list="$list "
	if [ -z "$item" ]; then
	    list="$list''"
	else
            while ipart=${item%%\'*}; do
                if case ${ipart} in
                    *[!-=~/:.0-9_a-zA-Z]*) false;;
                esac then list=${list:-}${ipart}
                else list="${list:-}'${ipart}'"
                fi
                [ "${item}" = "${ipart}" ] && break
                item=${item#*\'}
                list="${list:-}\\'"
            done
	fi
    done
    eval "$var=\$list"
    unset item ipart list
}

# Create a scalar keyword for the Domain Specific Language. <keyword>
# setter is created. The value is stored in _<keyword>. The newly created
# function can be with 1 argument to set the new value.
#
# Args:
#   keyword: string: Keyword used in the DSL.
#   value: string/integer: The default value to return.
# Returns:
#   integer: success (TRUE/FALSE constant).
# Bails:
#   Unexpected number of arguments.
# Side effects:
#   Variable _<keyword> is set.
#   Function <keyword> is defined.
create_scalar_dsl() {
    [ $# -eq 2 ] || \
        bail "create_scalar_dsl expects 2 arguments; $# given"

    eval "_$1=\"$2\";                                             \
           $1() {                                                  \
               [ \$# -eq 1 ] ||                                    \
                   bail \"$1 expects 1 argument; \$# given\";      \
                                                                   \
               _$1=\"\$1\";                                        \
           }"
}

# Create the 'cmd' keywords for the Domain Specific Language.
# cmd_<keyword>, cmd_<keyword>_args and cmd_<keyword>verbose_arg setters
# are created. The values are stored in _cmd_<keyword>, _cmd_<keyword>_args
# and _cmd_<keyword>verbose_arg. The newly created functions can be invoked
# with 1 argument to set the new value.
#
# Args:
#   keyword: string: Keyword used in the DSL.
#   command: string: Shell command to invoke. cmd_<keyword> function
#   args: string: Arguments to use. cmd_<keyword>_args function. [optional]
#   verbose_arg: string: Argument to use to enable commands verbose mode
#                        cmd_<keyword>_verbose_arg function. [optional]
# Returns:
#   integer: success (TRUE/FALSE constant).
# Bails:
#   Unexpected number of arguments.
# Side effects:
#   Variables _<keyword>, _<keyword>_args and _<keyword>_verbose_arg are
#   set.
#   Functions cmd_<keyword>, cmd_<keyword>_args and
#   cmd_<keyword>_verbose_arg are defined.
create_cmd_dsl() {
    [ $# -ge 2 ] && [ $# -le 4 ] || \
        bail "create_cmd_dsl expects 2 to 4 arguments; $# given"

    # Get the dsl name.
    cmd_dsl=${1-}
    shift

    # Create the cmd_<cmd>, cmd_<cmd>_args and cmd_<cmd>verbose_arg
    # getters and setters.
    for postfix in '' args verbose_arg; do
        cmd=_${cmd_dsl}${postfix:+_$postfix}
        create_scalar_dsl "cmd${cmd}" "${1-}"
        shift
    done

    unset cmd postfix cmd_dsl
}

# Create an array keyword for the Domain Specific Language. <keyword>
# setter is created. The array is stored in _<keyword>. The newly created
# function can be invoked with the specified number of arguments to add
# to the array. Missing arguments will be added empty ('').
#
# Args:
#   keyword: string: Keyword used in the DSL.
#   args: integer[s]: The accepted number of arguments given at once.
#                     These should be order ascending.
# Returns:
#   integer: success (TRUE/FALSE constant).
# Bails:
#   Unexpected number of arguments.
# Side effects:
#   Variable _<keyword> is set.
#   Function <keyword> is defined.
create_array_dsl() {
    [ $# -ge 2 ] || \
        bail "create_array_dsl expects at least 2 arguments; $# given"

    fn=$1
    shift
    args=$(eval "echo \$$#")
    eval "_$fn=\"\";                                                   \
          $fn() {                                                      \
               in_list \$# $@ || {                                     \
                   args=\"\$#\";                                       \
                   set -- $@;                                          \
                   msg=\"$fn expects \";                               \
                   while [ \$# -gt 1 ]; do                             \
                       case \$# in                                     \
                           2) msg=\"\$msg\$1 or \";;                   \
                           *) msg=\"\$msg\$1, \";;                     \
                       esac;                                           \
                       shift;                                          \
                   done;                                               \
                   msg=\"\$msg\$1 argument(s); \$args given.\";        \
                   bail \"\$msg\";                                     \
               };                                                      \
	       add_to_list _$fn \"\$@\";                               \
               i=\$#;                                                  \
               while [ \$i -lt $args ]; do                             \
                   add_to_list _$fn '';                                \
                   i=\$((\$i + 1));                                    \
               done;                                                   \
           }"
    unset fn args
}


# Create DSL and default configuration
######################################
#              keyword  cmd      args         verbose_arg
create_cmd_dsl 'cp'     'cp'     '-al'        '--verbose'
create_cmd_dsl 'mv'     'mv'     ''           '--verbose'
create_cmd_dsl 'rm'     'rm'     '-rf'        '--verbose'
create_cmd_dsl 'mkdir'  'mkdir'  '-p -m 755'  '--verbose'
create_cmd_dsl 'rsync'  'rsync'  '-a --delete --numeric-ids --relative --delete-excluded' \
                                              '--verbose'
create_cmd_dsl 'date'   'date'   '+%Y%m%d%H%m.%S'  ''
create_cmd_dsl 'touch'  'touch'  ''           ''
create_cmd_dsl 'ssh'    'ssh'    ''           '--verbose'

#                 keyword               default
create_scalar_dsl 'cmd_rsync_test_arg'  '--dry-run'
create_scalar_dsl 'backup_server'       ""
create_scalar_dsl 'snapshot_root'       "$(hostname)"
create_scalar_dsl 'loglevel'            0

#                 keyword     accepted # of args
create_array_dsl  'include'   1
create_array_dsl  'exclude'   1
create_array_dsl  'retain'    2
create_array_dsl  'backup'    2 3

# psnapshot script variables
############################
_command=
_configfile="/etc/psnapshot.conf"
_help=$PSNAPSHOT_FALSE
_test=$PSNAPSHOT_FALSE
_verbose=0
_version=$PSNAPSHOT_FALSE

# Parse the passed argument list.
#
# Args:
#   args: array of strings: The arguments to parse.
# Returns:
#   integer: success (TRUE/FALSE constant).
# Side effects:
#   Sets _command, _configfile, _help, _test, _verbose and _version.
parse_args() {
    while [ $# -gt 0 ]; do
	case "$1" in
	    --) shift; break;;
	    -c) if [ $# -eq 1 ] || [ "$2" = "--" ]; then
	            error "No argument value for option -c"
		    return $PSNAPSHOT_FALSE
		else
		    _configfile="$2"
		    shift 2
		fi;;
	    -*) case "$1" in
	             -h*) _help=$PSNAPSHOT_TRUE;;
		     -t*) _test=$PSNAPSHOT_TRUE;;
                     -v*) _verbose=$(( $_verbose + 1 ));;
                     -V*) _version=$PSNAPSHOT_TRUE;;
	              -*) error "Illegal option '-$(expr $1 : -\\\(.\\\))'"
		          return $PSNAPSHOT_FALSE;;
		esac
		opt=$(expr $1 : -.\\\(.*\\\))
                shift
	        set -- ${opt:+-$opt} $@
	        unset opt;;
	    *) break;;
        esac
    done

    if [ $# -gt 1 ]; then
        error "Too many commands given"
	return $PSNAPSHOT_FALSE
    fi

    _command=${1:-}
    return $PSNAPSHOT_TRUE
}


# Parse args & load configuration if we're not unit-testing
###########################################################
if [ -z ${SHUNIT_VERSION:-} ]; then
    parse_args $@ || bail

    # These functions should not be available in the configuration
    unset -f create_cmd_dsl create_scalar_dsl create_array_dsl parse_args

    # Version function do not need the configuration
    if [ $_version = $PSNAPSHOT_FALSE ] && [ -r $_configfile ]; then
        . $_configfile
    fi
fi

# Enable the command logging if the verbosity level is sufficient.
#
# Args:
#   none.
enable_command_log() {
    if [ 5 -le $_loglevel ]; then
        set -x
    fi
}

# Show the version of the script.
#
# Args:
#   None
show_version() {
    printf "%s %s\n" "$(basename $0)" "$PSNAPSHOT_VERSION"
}

# Show the short usage string.
#
# Args:
#   None
show_usage() {
    printf "Usage: %s [-c configfile] [-htvV] retention" "$(basename $0)"
}

# Show the retention levels as inserted by the configuration.
#
# Args:
#   None
show_retentions() {
    eval set -- $_retain

    printf "Available retention levels:\n"
    while [ $# -gt 0 ]; do
        printf "    %s\n" "$1"
	shift 2
    done
}

# Show how to use the script.
#
# Args:
#   None
show_help() {
    show_version
    show_usage

    echo
    echo "psnapshot is a filesystem snapshot utility. It can take incremental"
    echo "snapshots of local filesystems to remote machines."
    echo
    echo "psnapshot comes with ABSOLUTELY NO WARRANTY.  This is free software,"
    echo "and you are welcome to redistribute it under certain conditions."
    echo "See the ISC License for details."
    echo
    echo "Options:"
    echo "    -c [file]  - Specify alternate config file (-c /path/to/file)."
    echo "    -h help    - Display this help".
    echo "    -v verbose - Increase verbosity level (maybe repeated)".
    echo "    -V version - Display the version."
    echo "    -t test    - Dry run."
    echo
    echo "Retention:"
    echo "    retention  - Retention level as defined in the config file."
    echo

    show_retentions
}

# Get the retention identifier for a specific retention index.
#
# Args:
#   index: number: The retention identifier to lookup
# Returns:
#   Echos the configured retention or none if not found.
retention() {
    i=$1
    i=$((i*2))
    eval set -- "$_retain"

    if [ $i -ge 0 ] && [ $i -lt $# ]; then
	shift $i
        printf "%s\n" "$1"
    fi

    unset i
}

# Get the number of history items to keep for a specific retention
# index.
#
# Args:
#   index: number: The retention identifier to lookup the history for
# Returns:
#   Echos the configured history items related to the specified retention.
#   If the index specifies a wrong rentention '-1' is echoed.
retention_history() {
    i=$1
    i=$((i*2+1))
    eval set -- "$_retain"

    if [ $i -lt 0 ] || [ $i -gt $# ]; then
        echo "-1"
    else
	shift $i
        echo $1
    fi

    unset i
}

# Get the index of the retention identifier.
#
# Args:
#   retention: string: The retention identifier to lookup
# Returns:
#   Echos the index back. If the retention identifier is not found
#   '-1' will be echoed.
retention_index() {
    if [ -n "${1:-}" ] && [ -n "${_retain:-}" ]; then
        retention=$1
        eval set -- "$_retain"

        i=0
        while [ $# -gt 0 ]; do
            if [ "$1" = "$retention" ]; then
	        echo "$i"
		unset i retention
	        return
	    fi
	    i=$((i+1))
	    shift 2
        done
    fi

    unset i retention
    echo "-1"
}

# Create the cp command line
#
# Args:
#   src: string: The file or directory to copy.
#   tgt: string: The target name of the file or directory.
# Returns:
#   Echos the command to create a directory.
copy() {
    args="${_cmd_cp_args} $(verbose "$_cmd_cp_verbose_arg")"

    echo "if [ -e \"$1\" ]; then $_cmd_cp $args \"$1\" \"$2\"; else echo \"$(verbose "'$1' doesn't exist")\"; fi"

    unset args
}

# Create the mkdir command line
#
# Args:
#   dir: string: The directory to create.
# Returns:
#   Echos the command to create a directory.
makedir() {
    args="${_cmd_mkdir_args} $(verbose "$_cmd_mkdir_verbose_arg")"

    echo "if [ ! -e \"$1\" ]; then $_cmd_mkdir $args \"$1\"; else echo \"$(verbose "'$1' already exist")\"; fi"

    unset args
}

# Create the rm command line
#
# Args:
#   file: string: The file or directory to remove.
# Returns:
#   Echos the command to remove a file or directory.
remove() {
    args="${_cmd_rm_args} $(verbose "$_cmd_rm_verbose_arg")"

    echo "if [ -e \"$1\" ]; then $_cmd_rm $args \"$1\"; else echo '$(verbose "$1 doesnt exist")'; fi"

    unset args cmd
}

# Create the mv command line
#
# Args:
#   src: string: The file or directory to rename.
#   tgt: string: The destination name of file or directory.
# Returns:
#   Echos the command to rename a file or directory.
rename() {
    args="${_cmd_mv_args} $(verbose "$_cmd_mv_verbose_arg")"

    echo "if [ -e \"$1\" ]; then $_cmd_mv $args \"$1\" \"$2\"; else echo \"$(verbose "'$1' doesn't exist")\"; fi"

    unset args
}

# Create the date command line
#
# Args:
#   none
# Returns:
#   Echos the command to retrieve the date.
getdate() {
    args="${_cmd_date_args} $(verbose "$_cmd_date_verbose_arg")"

    echo "$_cmd_date $args"

    unset args
}

# Create the touch command line
#
# Args:
#   src: string: The file or directory to touch.
#   timestamp: string: The timestamp to set.
# Returns:
#   Echos the command to touch a file or directory.
setdate() {
    echo "if [ -e \"$1\" ]; then $_cmd_touch \"$1\" -t \"$2\"; else echo \"$(verbose "'$1' doesn't exist")\"; fi"
}

# Create the rsync command line
#
# Args:
#   src: string: The file or directory to rename.
#   tgt: string: The destination name of file or directory.
#   extra_args: string: Extra arguments to pass to the command.
# Returns:
#   Echos the command to synchronize a file or directory.
synchronize() {
    src=$1
    tgt=$2
    includes=""
    excludes=""
    args="--rsh=\"$_cmd_ssh $_cmd_ssh_args\" $_cmd_rsync_args $(verbose "${_cmd_rsync_verbose_arg}") $3"
    test_args=$(test $_test -eq $PSNAPSHOT_TRUE && echo $_cmd_rsync_test_arg)

    eval set -- "$_include"
    while [ $# -gt 0 ]; do
        includes="${includes} --include=$1"
        shift
    done

    eval set -- "$_exclude"
    while [ $# -gt 0 ]; do
        excludes="${excludes} --exclude=$1"
        shift
    done

    echo "if [ -e \"$src\" ]; then $_cmd_rsync $args $test_args ${includes} ${excludes} \"$src\" \"$tgt\"; else echo \"$(verbose "'$src' doesn't exist")\"; fi"

    unset args excludes includes src test_args tgt
}

# Locally execute a command.
#
# Args:
#   force: --force (optional): force command to be execute regardless of testmode.
#   command: string: Command to execute.
lexecute() {
    force=$PSNAPSHOT_FALSE
    if [ -n "$1" ] && [ "$1" = "--force" ]; then
        force=$PSNAPSHOT_TRUE
        shift 1
    fi

    debug "Locally execute: $@"
    if [ $_test -eq $PSNAPSHOT_FALSE ] || [ $force -eq $PSNAPSHOT_TRUE ]; then
        ( enable_command_log; eval "$@" )
    fi

    unset force
}

# Remotely execute a command.
#
# Args:
#   force: --force (optional): force command to be execute regardless of testmode.
#   command: string: Command to execute.
rexecute() {
    force=0
    if [ -n "$1" ] && [ "$1" = "--force" ]; then
        force=1
        shift 1
    fi

    debug "Remotely execute: $@"

    if [ $_test -eq $PSNAPSHOT_FALSE ] || [ $force -eq 1 ]; then
        [ -n "$_cmd_ssh" ] && add_to_list cmd $_cmd_ssh
	[ -n "$_cmd_ssh_args" ] && add_to_list cmd $_cmd_ssh_args
        [ -n "$_backup_server" ] && add_to_list cmd $_backup_server
	add_to_list cmd "$@"

        if [ -r "/dev/pts/ptmx" -a -c "/dev/pts/ptmx"  ]; then
            ( enable_command_log; eval "${cmd} < /dev/pts/ptmx" )
        else
            ( enable_command_log; eval "${cmd}" )
        fi
    fi

    unset cmd force
}

# Rotate the created backups from 0 up to the associated history.
#
# Args:
#   index: number: The retention identifier to rotate
# Returns:
#   None.
rotate() {
    retention=$(retention $1)
    history=$(($(retention_history $1)-1))

    info "Rotating $retention backups"

    src="${_snapshot_root}/${retention}.${history}"
    message "Remove '$src'"
    rexecute "$(remove "$src")"
    while [ $history -gt 0 ]; do
	tgt="${_snapshot_root}/${retention}.${history}"
        history=$(($history-1))
        src="${_snapshot_root}/${retention}.${history}"

        message "Rename '$src' to '$tgt'"
        rexecute $(rename "$src" "$tgt")
    done

    unset cmd src tgt retention history
}

# Create a snapshot of the local client to a remote server.
#
# Args:
#   index: number: The retention identifier to create a snapshot for.
# Returns:
#   None
snapshot() {
    retention=$(retention $1)
    date=$2

    src="${_snapshot_root}/${retention}.1"
    tgt="${_snapshot_root}/${retention}.0"

    message "Copy '$src' to '$tgt'"
    rexecute "$(copy "$src" "$tgt")"
    message "Make directory '$tgt'"
    rexecute "$(makedir "$tgt")"

    eval set -- "$_backup"
    while [ $# -gt 0 ]; do
        lsrc="$1"
	rtgt="${_backup_server:+$_backup_server:}${_snapshot_root}/${retention}.0/$2"
        message "Synchronize '$lsrc' to '$rtgt' $(test -z "$3" || echo "using extra arguments '$3'")"

        lexecute --force $(synchronize "$lsrc" "$rtgt" "$3")
        shift 3
    done

    message "Set date of '$tgt' to '$date'"
    rexecute $(setdate "$tgt" "$date")

    unset date retention src tgt lsrc rtgt
}

# Propagate the previous retention level up to the specified level.
#
# Args:
#   index: number: The retention identifier to rotate
# Returns:
#   None
propagate() {
    retention=$(retention $1)
    prev_retention=$(retention $(($1-1)))
    history=$(retention_history $(($1-1)))

    src="${_snapshot_root}/${prev_retention}.$((history - 1))"
    tgt="${_snapshot_root}/${retention}.0"
    message "Rename '$src' to '$tgt'"
    rexecute $(rename "$src" "$tgt")

    unset src tgt retention prev_retention history
}

# Backup the identified retention level.
#
# Args:
#   index: number: The retention identifier to rotate.
#   date: string: The date the backup is initiated.
# Returns:
#   None
archive() {
    if [ $1 = 0 ]; then
        snapshot $1 $2
    else
        propagate $1
    fi
}

# The scripts main method.
#
# Args:
#   None
# Returns:
#   None
main() {
    _retention_index=$(retention_index ${_command})

    if [ $_help -eq $PSNAPSHOT_TRUE ]; then
        show_help;
	quit
    elif [ $_version -eq $PSNAPSHOT_TRUE ]; then
        show_version
	quit
    elif [ $_retention_index -eq -1 ]; then
        show_retentions
	bail
    fi

    if [ $_verbose -gt 0 ]; then
        _loglevel=$_verbose
    fi

    info "Taking '${_command}' snapshot"
    _date=$(eval $(getdate))

    rotate ${_retention_index}
    archive ${_retention_index} ${_date}
}

# Do not execute if we're testing
if [ -z ${SHUNIT_VERSION:-} ]; then
   main
fi
